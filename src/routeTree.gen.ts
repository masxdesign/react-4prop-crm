// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminImport } from './routes/_admin'
import { Route as LoginRouteImport } from './routes/login/route'
import { Route as IndexImport } from './routes/index'
import { Route as AdminWithMenuImport } from './routes/_admin/_with-menu'
import { Route as AdminDashboardFormRouteImport } from './routes/_admin/dashboard/form/route'
import { Route as AdminWithMenuDashboardDataClientsImport } from './routes/_admin/_with-menu/dashboard/data/clients'
import { Route as AdminWithMenuDashboardDataEachListRouteImport } from './routes/_admin/_with-menu/dashboard/data/each/list/route'
import { Route as AdminWithMenuDashboardDataClientsListRouteImport } from './routes/_admin/_with-menu/dashboard/data/clients/list/route'
import { Route as AdminWithMenuDashboardDataClientsImportRouteImport } from './routes/_admin/_with-menu/dashboard/data/clients/import/route'
import { Route as AdminWithMenuDashboardDataClientsAddRouteImport } from './routes/_admin/_with-menu/dashboard/data/clients/add/route'

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const LoginRouteRoute = LoginRouteImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/route.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AdminWithMenuRoute = AdminWithMenuImport.update({
  id: '/_with-menu',
  getParentRoute: () => AdminRoute,
} as any)

const AdminDashboardFormRouteRoute = AdminDashboardFormRouteImport.update({
  path: '/dashboard/form',
  getParentRoute: () => AdminRoute,
} as any).lazy(() =>
  import('./routes/_admin/dashboard/form/route.lazy').then((d) => d.Route),
)

const AdminWithMenuDashboardDataClientsRoute =
  AdminWithMenuDashboardDataClientsImport.update({
    path: '/dashboard/data/clients',
    getParentRoute: () => AdminWithMenuRoute,
  } as any).lazy(() =>
    import('./routes/_admin/_with-menu/dashboard/data/clients.lazy').then(
      (d) => d.Route,
    ),
  )

const AdminWithMenuDashboardDataEachListRouteRoute =
  AdminWithMenuDashboardDataEachListRouteImport.update({
    path: '/dashboard/data/each/list',
    getParentRoute: () => AdminWithMenuRoute,
  } as any).lazy(() =>
    import(
      './routes/_admin/_with-menu/dashboard/data/each/list/route.lazy'
    ).then((d) => d.Route),
  )

const AdminWithMenuDashboardDataClientsListRouteRoute =
  AdminWithMenuDashboardDataClientsListRouteImport.update({
    path: '/list',
    getParentRoute: () => AdminWithMenuDashboardDataClientsRoute,
  } as any).lazy(() =>
    import(
      './routes/_admin/_with-menu/dashboard/data/clients/list/route.lazy'
    ).then((d) => d.Route),
  )

const AdminWithMenuDashboardDataClientsImportRouteRoute =
  AdminWithMenuDashboardDataClientsImportRouteImport.update({
    path: '/import',
    getParentRoute: () => AdminWithMenuDashboardDataClientsRoute,
  } as any).lazy(() =>
    import(
      './routes/_admin/_with-menu/dashboard/data/clients/import/route.lazy'
    ).then((d) => d.Route),
  )

const AdminWithMenuDashboardDataClientsAddRouteRoute =
  AdminWithMenuDashboardDataClientsAddRouteImport.update({
    path: '/add',
    getParentRoute: () => AdminWithMenuDashboardDataClientsRoute,
  } as any).lazy(() =>
    import(
      './routes/_admin/_with-menu/dashboard/data/clients/add/route.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/_admin': {
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_admin/_with-menu': {
      preLoaderRoute: typeof AdminWithMenuImport
      parentRoute: typeof AdminImport
    }
    '/_admin/dashboard/form': {
      preLoaderRoute: typeof AdminDashboardFormRouteImport
      parentRoute: typeof AdminImport
    }
    '/_admin/_with-menu/dashboard/data/clients': {
      preLoaderRoute: typeof AdminWithMenuDashboardDataClientsImport
      parentRoute: typeof AdminWithMenuImport
    }
    '/_admin/_with-menu/dashboard/data/clients/add': {
      preLoaderRoute: typeof AdminWithMenuDashboardDataClientsAddRouteImport
      parentRoute: typeof AdminWithMenuDashboardDataClientsImport
    }
    '/_admin/_with-menu/dashboard/data/clients/import': {
      preLoaderRoute: typeof AdminWithMenuDashboardDataClientsImportRouteImport
      parentRoute: typeof AdminWithMenuDashboardDataClientsImport
    }
    '/_admin/_with-menu/dashboard/data/clients/list': {
      preLoaderRoute: typeof AdminWithMenuDashboardDataClientsListRouteImport
      parentRoute: typeof AdminWithMenuDashboardDataClientsImport
    }
    '/_admin/_with-menu/dashboard/data/each/list': {
      preLoaderRoute: typeof AdminWithMenuDashboardDataEachListRouteImport
      parentRoute: typeof AdminWithMenuImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  LoginRouteRoute,
  AdminRoute.addChildren([
    AdminWithMenuRoute.addChildren([
      AdminWithMenuDashboardDataClientsRoute.addChildren([
        AdminWithMenuDashboardDataClientsAddRouteRoute,
        AdminWithMenuDashboardDataClientsImportRouteRoute,
        AdminWithMenuDashboardDataClientsListRouteRoute,
      ]),
      AdminWithMenuDashboardDataEachListRouteRoute,
    ]),
    AdminDashboardFormRouteRoute,
  ]),
])
