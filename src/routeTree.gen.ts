// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as LoginRouteImport } from './routes/login/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardDataImport } from './routes/dashboard/data'
import { Route as DashboardImportRouteImport } from './routes/dashboard/import/route'
import { Route as DashboardAddRouteImport } from './routes/dashboard/add/route'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index/route'
import { Route as DashboardDataDatasetImport } from './routes/dashboard/data/$dataset'
import { Route as DashboardDataIndexRouteImport } from './routes/dashboard/data/index/route'
import { Route as DashboardDataDatasetListRouteImport } from './routes/dashboard/data/$dataset/list/route'
import { Route as DashboardDataDatasetAddRouteImport } from './routes/dashboard/data/$dataset/add/route'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const LoginRouteRoute = LoginRouteImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/route.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardDataRoute = DashboardDataImport.update({
  path: '/data',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard/data.lazy').then((d) => d.Route),
)

const DashboardImportRouteRoute = DashboardImportRouteImport.update({
  path: '/import',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard/import/route.lazy').then((d) => d.Route),
)

const DashboardAddRouteRoute = DashboardAddRouteImport.update({
  path: '/add',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard/add/route.lazy').then((d) => d.Route),
)

const DashboardIndexRouteRoute = DashboardIndexRouteImport.update({
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index/route.lazy').then((d) => d.Route),
)

const DashboardDataDatasetRoute = DashboardDataDatasetImport.update({
  path: '/$dataset',
  getParentRoute: () => DashboardDataRoute,
} as any).lazy(() =>
  import('./routes/dashboard/data/$dataset.lazy').then((d) => d.Route),
)

const DashboardDataIndexRouteRoute = DashboardDataIndexRouteImport.update({
  path: '/',
  getParentRoute: () => DashboardDataRoute,
} as any).lazy(() =>
  import('./routes/dashboard/data/index/route.lazy').then((d) => d.Route),
)

const DashboardDataDatasetListRouteRoute =
  DashboardDataDatasetListRouteImport.update({
    path: '/list',
    getParentRoute: () => DashboardDataDatasetRoute,
  } as any).lazy(() =>
    import('./routes/dashboard/data/$dataset/list/route.lazy').then(
      (d) => d.Route,
    ),
  )

const DashboardDataDatasetAddRouteRoute =
  DashboardDataDatasetAddRouteImport.update({
    path: '/add',
    getParentRoute: () => DashboardDataDatasetRoute,
  } as any).lazy(() =>
    import('./routes/dashboard/data/$dataset/add/route.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/add': {
      preLoaderRoute: typeof DashboardAddRouteImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/import': {
      preLoaderRoute: typeof DashboardImportRouteImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/data': {
      preLoaderRoute: typeof DashboardDataImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/data/': {
      preLoaderRoute: typeof DashboardDataIndexRouteImport
      parentRoute: typeof DashboardDataImport
    }
    '/dashboard/data/$dataset': {
      preLoaderRoute: typeof DashboardDataDatasetImport
      parentRoute: typeof DashboardDataImport
    }
    '/dashboard/data/$dataset/add': {
      preLoaderRoute: typeof DashboardDataDatasetAddRouteImport
      parentRoute: typeof DashboardDataDatasetImport
    }
    '/dashboard/data/$dataset/list': {
      preLoaderRoute: typeof DashboardDataDatasetListRouteImport
      parentRoute: typeof DashboardDataDatasetImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  LoginRouteRoute,
  DashboardRoute.addChildren([
    DashboardIndexRouteRoute,
    DashboardAddRouteRoute,
    DashboardImportRouteRoute,
    DashboardDataRoute.addChildren([
      DashboardDataIndexRouteRoute,
      DashboardDataDatasetRoute.addChildren([
        DashboardDataDatasetAddRouteRoute,
        DashboardDataDatasetListRouteRoute,
      ]),
    ]),
  ]),
  LogoutRoute,
])
