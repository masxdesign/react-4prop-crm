// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as LoginRouteImport } from './routes/login/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardListImport } from './routes/dashboard/list'
import { Route as DashboardImportRouteImport } from './routes/dashboard/import/route'
import { Route as DashboardAddRouteImport } from './routes/dashboard/add/route'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index/route'
import { Route as DashboardListDatasetRouteImport } from './routes/dashboard/list/$dataset/route'
import { Route as DashboardListIndexRouteImport } from './routes/dashboard/list/index/route'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const LoginRouteRoute = LoginRouteImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/route.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DashboardListRoute = DashboardListImport.update({
  path: '/list',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard/list.lazy').then((d) => d.Route),
)

const DashboardImportRouteRoute = DashboardImportRouteImport.update({
  path: '/import',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard/import/route.lazy').then((d) => d.Route),
)

const DashboardAddRouteRoute = DashboardAddRouteImport.update({
  path: '/add',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard/add/route.lazy').then((d) => d.Route),
)

const DashboardIndexRouteRoute = DashboardIndexRouteImport.update({
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index/route.lazy').then((d) => d.Route),
)

const DashboardListDatasetRouteRoute = DashboardListDatasetRouteImport.update({
  path: '/$dataset',
  getParentRoute: () => DashboardListRoute,
} as any).lazy(() =>
  import('./routes/dashboard/list/$dataset/route.lazy').then((d) => d.Route),
)

const DashboardListIndexRouteRoute = DashboardListIndexRouteImport.update({
  path: '/',
  getParentRoute: () => DashboardListRoute,
} as any).lazy(() =>
  import('./routes/dashboard/list/index/route.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/add': {
      preLoaderRoute: typeof DashboardAddRouteImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/import': {
      preLoaderRoute: typeof DashboardImportRouteImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/list': {
      preLoaderRoute: typeof DashboardListImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/list/': {
      preLoaderRoute: typeof DashboardListIndexRouteImport
      parentRoute: typeof DashboardListImport
    }
    '/dashboard/list/$dataset': {
      preLoaderRoute: typeof DashboardListDatasetRouteImport
      parentRoute: typeof DashboardListImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  LoginRouteRoute,
  DashboardRoute.addChildren([
    DashboardIndexRouteRoute,
    DashboardAddRouteRoute,
    DashboardImportRouteRoute,
    DashboardListRoute.addChildren([
      DashboardListIndexRouteRoute,
      DashboardListDatasetRouteRoute,
    ]),
  ]),
  LogoutRoute,
])
